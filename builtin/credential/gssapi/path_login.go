package userpass

import (
	"fmt"

	"github.com/hashicorp/vault/logical"
	"github.com/hashicorp/vault/logical/framework"
)

func pathLogin(b *backend) *framework.Path {
	return &framework.Path{
		Pattern: "login",
		Fields: map[string]*framework.FieldSchema{
			"GssAPIToken": &framework.FieldSchema{
				Type:        framework.TypeString,
				Description: "Token generated by GSSAPI backend",
			},
		},

		Callbacks: map[logical.Operation]framework.OperationFunc{
			logical.WriteOperation: b.pathLogin,
		},

		HelpSynopsis:    pathLoginSyn,
		HelpDescription: pathLoginDesc,
	}
}

func (b *backend) pathLogin(
	req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	gssAPIToken := d.Get("GssAPIToken").(string)

	fmt.Println("Verifing token from client:", gssAPIToken)

	return &logical.Response{
		Auth: &logical.Auth{
			Metadata: map[string]string{
				"username": "someuser",
			},
			DisplayName: "someuser",
			LeaseOptions: logical.LeaseOptions{
				TTL:       b.System().DefaultLeaseTTL(),
				Renewable: false,
			},
		},
	}, nil
}

func (b *backend) pathLoginRenew(
	req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	return nil, nil
}

const pathLoginSyn = `
Log in with a username and password.
`

const pathLoginDesc = `
This endpoint authenticates using a username and password.
`
