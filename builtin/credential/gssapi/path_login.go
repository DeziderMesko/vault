package userpass

import (
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/hashicorp/vault/logical"
	"github.com/hashicorp/vault/logical/framework"
)

func pathLogin(b *backend) *framework.Path {
	return &framework.Path{
		Pattern: "login",
		Fields: map[string]*framework.FieldSchema{
			"GssAPIToken": &framework.FieldSchema{
				Type:        framework.TypeString,
				Description: "Token generated by GSSAPI backend",
			},
		},

		Callbacks: map[logical.Operation]framework.OperationFunc{
			logical.WriteOperation: b.pathLogin,
		},

		HelpSynopsis:    pathLoginSyn,
		HelpDescription: pathLoginDesc,
	}
}

func (b *backend) pathLogin(
	req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	gssAPIToken := d.Get("GssAPIToken").(string)

	fmt.Println("Verifing token from client:", gssAPIToken[:15])

	username, err := getUsernameFromToken(gssAPIToken)
	if err != nil {
		return nil, err
	}

	return &logical.Response{
		Auth: &logical.Auth{
			Policies:    []string{"root"},
			DisplayName: username,
			LeaseOptions: logical.LeaseOptions{
				TTL:         b.System().DefaultLeaseTTL(),
				Renewable:   true,
				GracePeriod: b.System().DefaultLeaseTTL() / 10,
			},
		},
	}, nil
}

func getUsernameFromToken(token string) (string, error) {
	byteToken, err := base64.StdEncoding.DecodeString(token)
	if err != nil {
		return "", err
	}
	_ = byteToken
	// use accept security context to verify and extract username
	username := "name.surname@domain"
	return strings.Split(username, "@")[0], nil

}

func (b *backend) pathLoginRenew(
	req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	return nil, nil
}

const pathLoginSyn = `
Log in with a GSSAPI token
`

const pathLoginDesc = `
This endpoint authenticates using a GSSAPI backend
`
